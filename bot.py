import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
import openai

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –ø–æ–¥—Ç—è–Ω—É–ª–∏—Å—å
if not BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª!")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

openai.api_key = OPENAI_API_KEY

# /start
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n\n"
                         "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "üìä /stats ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                         "üßπ /reset ‚Äì —Å–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã\n"
                         "üí° /advice ‚Äì —Å–æ–≤–µ—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏\n"
                         "üîÆ /forecast ‚Äì –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
                         "‚ùì /help ‚Äì –ø–æ–º–æ—â—å")

# /help
@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                         "üìä /stats ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                         "üßπ /reset ‚Äì —Å–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã\n"
                         "üí° /advice ‚Äì —Å–æ–≤–µ—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏\n"
                         "üîÆ /forecast ‚Äì –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
                         "‚ùì /help ‚Äì –ø–æ–º–æ—â—å")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–ø–æ–∫–∞ –≤ –ø–∞–º—è—Ç–∏)
expenses = []

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—É–º–º–æ–π)
@dp.message(F.text & ~F.text.startswith("/"))
async def add_expense(message: Message):
    text = message.text
    numbers = [int(s) for s in text.split() if s.isdigit()]
    if numbers:
        amount = numbers[0]
        expenses.append(amount)
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–ª —Ç—Ä–∞—Ç—É: {amount}‚Ç∏")
    else:
        await message.answer("‚ùå –ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–¢–∞–∫—Å–∏ 1500'")


# /stats
@dp.message(Command("stats"))
async def stats_cmd(message: Message):
    if not expenses:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ üì≠")
    else:
        total = sum(expenses)
        await message.answer(f"üìä –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total}‚Ç∏")

# /reset
@dp.message(Command("reset"))
async def reset_cmd(message: Message):
    expenses.clear()
    await message.answer("üßπ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–±—Ä–æ—à–µ–Ω—ã!")

# /advice
@dp.message(Command("advice"))
async def advice_cmd(message: Message):
    if not expenses:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å —Ä–∞—Å—Ö–æ–¥—ã, –ø–æ—Ç–æ–º –¥–∞–º —Å–æ–≤–µ—Ç üí°")
        return
    total = sum(expenses)
    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
            {"role": "user", "content": f"–Ø –ø–æ—Ç—Ä–∞—Ç–∏–ª {total} —Ç–µ–Ω–≥–µ. –î–∞–π —Å–æ–≤–µ—Ç, –∫–∞–∫ —ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ–Ω—å–≥–∏."}
        ]
    )
    await message.answer("üí° –°–æ–≤–µ—Ç: " + response.choices[0].message.content)

# /forecast
@dp.message(Command("forecast"))
async def forecast_cmd(message: Message):
    if not expenses:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ üì≠")
        return
    total = sum(expenses)
    avg = total / len(expenses)
    forecast = avg * 30
    await message.answer(f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑: –µ—Å–ª–∏ —Ç—Ä–∞—Ç–∏—à—å —Ç–∞–∫ –∂–µ, —Ç–æ –∑–∞ –º–µ—Å—è—Ü –≤—ã–π–¥–µ—Ç ~{int(forecast)}‚Ç∏")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
