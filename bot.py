import os
import asyncio
import io
import sqlite3
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from dotenv import load_dotenv
from openai import OpenAI
from db import init_db, add_expense, get_all_expenses, clear_expenses, DB_NAME

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = OpenAI(api_key=OPENAI_API_KEY)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ---
init_db()

# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ ---
CATEGORIES = {
    "–ï–¥–∞": [
        "–µ–¥–∞", "–ø–æ–µ–ª", "–ø–æ–µ—Å—Ç—å", "–æ–±–µ–¥", "—É–∂–∏–Ω", "–∑–∞–≤—Ç—Ä–∞–∫",
        "–ø—Ä–æ–¥—É–∫—Ç—ã", "–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–ø–æ—Ö–∞–≤–∞–ª", "–ø–æ–∫—É—à–∞–ª", "–ø–µ—Ä–µ–∫—É—Å",
        "–±—É—Ä–≥–µ—Ä", "–ø–∏—Ü—Ü–∞", "—Å—É—à–∏", "—Ä–æ–ª–ª—ã", "–¥–æ–Ω–µ—Ä", "–¥—ë–Ω–µ—Ä", "—à–∞—É—Ä–º–∞",
        "–ª–∞–≥–º–∞–Ω", "—Å–∞–º—Å–∞", "—Ñ–∞—Å—Ç—Ñ—É–¥", "–∫–æ—Ñ–µ", "—á–∞–π", "–Ω–∞–ø–∏—Ç–æ–∫", "—Å–æ–∫",
        "—à–∞—É—Ä–º—É", "–±—É—Ä–≥–µ—Ä—ã", "–ø–µ–ª—å–º–µ–Ω–∏", "—Å–∞–ª–∞—Ç", "–±—É—Ç–µ—Ä", "–≥–∞–º–±—É—Ä–≥–µ—Ä"
    ],
    "–û–¥–µ–∂–¥–∞": [
        "–æ–¥–µ–∂–¥–∞", "—à–æ–ø–∏–Ω–≥", "–∫—É—Ä—Ç–∫–∞", "–¥–∂–∏–Ω—Å—ã", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏",
        "–æ–±—É–≤—å", "—Ñ—É—Ç–±–æ–ª–∫–∞", "—à–º–æ—Ç–∫–∏", "—à–º–æ—Ç", "–ª—É–∫", "–∫–æ—Ñ—Ç–∞", "–ø–ª–∞—Ç—å–µ",
        "–±—Ä—é–∫–∏", "—Ä—É–±–∞—à–∫–∞", "—é–±–∫–∞", "–∫—É—Ä—Ç–æ—á–∫–∞"
    ],
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": [
        "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–∫–∏–Ω–æ", "—Ç–µ–∞—Ç—Ä", "–∏–≥—Ä–∞", "–∏–≥—Ä—ã", "–∫–æ–Ω—Ü–µ—Ä—Ç",
        "–≥—É–ª—è–ª", "–∫–∏–Ω–æ—à–∫—É", "—Ñ–∏–ª—å–º", "–±–∞—Ä", "—Ç—É—Å–∞", "–≤–µ—á–µ—Ä–∏–Ω–∫–∞",
        "–∫–∞—Ä–∞–æ–∫–µ", "–±–æ—É–ª–∏–Ω–≥", "–∫–ª—É–±"
    ],
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": [
        "—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å", "–º–µ—Ç—Ä–æ", "–±–µ–Ω–∑–∏–Ω", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "—Ç–∞–∫—Å–∏—á–∫–∞", "–º–∞—Ä—à—Ä—É—Ç–∫–∞", "–ø–æ–µ–∑–¥–∫–∞", "—Å–∞–º–æ–ª—ë—Ç", "–ø–æ–µ–∑–¥", "—Ç—Ä–∞–º–≤–∞–π"
    ],
    "–î–æ–º": [
        "–¥–æ–º", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∞—Ä–µ–Ω–¥–∞", "—Å–≤–µ—Ç", "–≤–æ–¥–∞",
        "–∫–æ–º–º—É–Ω–∞–ª–∫–∞", "–∂–∫—Ö", "—Ö–∞—Ç–∞", "—Ä–µ–º–æ–Ω—Ç", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–≥–∞–∑", "–º–µ–±–µ–ª—å"
    ],
    "–î—Ä—É–≥–æ–µ": []
}

# --- –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
def find_category(text: str):
    text = text.lower()
    for category, keywords in CATEGORIES.items():
        for kw in keywords:
            if kw in text:
                return category
    return None

# --- –ó–∞–ø—Ä–æ—Å –∫ –ò–ò –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
async def ask_ai_for_category(text: str):
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ (–ï–¥–∞, –û–¥–µ–∂–¥–∞, –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –î–æ–º, –î—Ä—É–≥–æ–µ)."},
            {"role": "user", "content": f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–π —ç—Ç—É —Ç—Ä–∞—Ç—É: {text}"}
        ]
    )
    return response.choices[0].message.content.strip()

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ ---
@dp.message(F.text & ~F.text.startswith("/"))
async def add_expense_handler(message: Message):
    text = message.text
    numbers = [int(s) for s in text.split() if s.isdigit()]
    if not numbers:
        await message.answer("‚ùå –ù–µ –ø–æ–Ω—è–ª —Å—É–º–º—É. –ù–∞–ø–∏—à–∏: '–ë—É—Ä–≥–µ—Ä 3000' –∏–ª–∏ '–¢–∞–∫—Å–∏ 1500'")
        return

    amount = numbers[0]
    category = find_category(text)
    if not category:
        category = await ask_ai_for_category(text)
        if category not in CATEGORIES:
            category = "–î—Ä—É–≥–æ–µ"

    add_expense(category, amount)
    await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–ª: {category} ‚Äì {amount}‚Ç∏")

# --- /stats ---
@dp.message(Command("stats"))
async def stats_cmd(message: Message):
    expenses = get_all_expenses()
    if not expenses:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return

    category_totals = {}
    total = 0
    for category, amount in expenses:
        category_totals[category] = category_totals.get(category, 0) + amount
        total += amount

    result = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤:\n\n"
    for category, amount in category_totals.items():
        result += f"‚Ä¢ {category}: {amount}‚Ç∏\n"
    result += f"\nüí∞ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {total}‚Ç∏"

    await message.answer(result)

# --- /advice ---
@dp.message(Command("advice"))
async def advice_cmd(message: Message):
    expenses = get_all_expenses()
    if not expenses:
        await message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return

    category_totals = {}
    total = 0
    for category, amount in expenses:
        category_totals[category] = category_totals.get(category, 0) + amount
        total += amount

    summary = ", ".join([f"{cat}: {amt}‚Ç∏" for cat, amt in category_totals.items()])
    summary_text = f"–¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {summary}. –û–±—â–∞—è —Å—É–º–º–∞: {total}‚Ç∏."

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –ª–∏—á–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–∞–º."},
            {"role": "user", "content": summary_text}
        ]
    )
    advice = response.choices[0].message.content.strip()
    await message.answer(f"üí° –°–æ–≤–µ—Ç:\n\n{advice}")

# --- /forecast ---
@dp.message(Command("forecast"))
async def forecast_cmd(message: Message):
    expenses = get_all_expenses()
    if not expenses:
        await message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤, –Ω–µ—á–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å.")
        return

    category_totals = {}
    total = 0
    for category, amount in expenses:
        category_totals[category] = category_totals.get(category, 0) + amount
        total += amount

    summary = ", ".join([f"{cat}: {amt}‚Ç∏" for cat, amt in category_totals.items()])
    summary_text = f"–¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {summary}. –û–±—â–∞—è —Å—É–º–º–∞: {total}‚Ç∏."

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –°–¥–µ–ª–∞–π –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –∏ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑."},
            {"role": "user", "content": summary_text}
        ]
    )
    forecast = response.choices[0].message.content.strip()
    await message.answer(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü:\n\n{forecast}")

# --- –ì—Ä–∞—Ñ–∏–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—ã ---
def get_expenses_by_days(days: int):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    date_limit = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")
    cursor.execute("SELECT category, amount FROM expenses WHERE date >= ?", (date_limit,))
    rows = cursor.fetchall()
    conn.close()
    return rows

def generate_pie_chart(expenses, title):
    category_totals = {}
    for category, amount in expenses:
        category_totals[category] = category_totals.get(category, 0) + amount
    if not category_totals:
        return None

    fig, ax = plt.subplots(figsize=(5, 5))
    ax.pie(category_totals.values(), labels=category_totals.keys(), autopct='%1.1f%%', startangle=140)
    ax.set_title(title)
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()
    return buf

# --- /week ---
@dp.message(Command("week"))
async def week_stats(message: Message):
    expenses = get_expenses_by_days(7)
    if not expenses:
        await message.answer("üì≠ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ—Ç.")
        return

    total = sum(amount for _, amount in expenses)
    category_totals = {}
    for category, amount in expenses:
        category_totals[category] = category_totals.get(category, 0) + amount

    text = "üìÖ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
    for cat, amt in category_totals.items():
        text += f"‚Ä¢ {cat}: {amt}‚Ç∏\n"
    text += f"\nüí∞ –í—Å–µ–≥–æ: {total}‚Ç∏"

    chart = generate_pie_chart(expenses, "–†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é")
    if chart:
        await message.answer_photo(BufferedInputFile(chart.read(), filename="week.png"), caption=text)
    else:
        await message.answer(text)

# --- /month ---
@dp.message(Command("month"))
async def month_stats(message: Message):
    expenses = get_expenses_by_days(30)
    if not expenses:
        await message.answer("üì≠ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ—Ç.")
        return

    total = sum(amount for _, amount in expenses)
    category_totals = {}
    for category, amount in expenses:
        category_totals[category] = category_totals.get(category, 0) + amount

    text = "üóìÔ∏è –†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:\n"
    for cat, amt in category_totals.items():
        text += f"‚Ä¢ {cat}: {amt}‚Ç∏\n"
    text += f"\nüí∞ –í—Å–µ–≥–æ: {total}‚Ç∏"

    chart = generate_pie_chart(expenses, "–†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü")
    if chart:
        await message.answer_photo(BufferedInputFile(chart.read(), filename="month.png"), caption=text)
    else:
        await message.answer(text)

# --- /reset ---
@dp.message(Command("reset"))
async def reset_cmd(message: Message):
    clear_expenses()
    await message.answer("üßπ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–±—Ä–æ—à–µ–Ω—ã!")

# --- /start ---
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç—Ä–∞—Ç—É ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: '–±—É—Ä–≥–µ—Ä 3000'.\n\n"
        "üìä /stats ‚Äì –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "üìÖ /week ‚Äì –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "üóìÔ∏è /month ‚Äì –∑–∞ –º–µ—Å—è—Ü\n"
        "üí° /advice ‚Äì —Å–æ–≤–µ—Ç –æ—Ç –ò–ò\n"
        "üìà /forecast ‚Äì –ø—Ä–æ–≥–Ω–æ–∑\n"
        "üßπ /reset ‚Äì —Å–±—Ä–æ—Å\n"
    )

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
